// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: 000005_get_all_tweets.sql

package generated

import (
	"context"
	"database/sql"
)

const getAllTweets = `-- name: GetAllTweets :many
SELECT 
    tweets.id, tweets.user_id, tweets.message, tweets.created_at, tweets.updated_at, tweets.image_url,
    users.username,
    COALESCE(retweet_counts.count, 0) AS retweet_count,
    COALESCE(like_counts.count, 0) AS like_count,
    CASE WHEN bookmarks.tweet_id IS NOT NULL THEN TRUE ELSE FALSE END AS is_bookmarked
FROM 
    tweets 
JOIN 
    users ON tweets.user_id = users.id
LEFT JOIN 
    (SELECT tweet_id, COUNT(*) AS count FROM retweets GROUP BY tweet_id) AS retweet_counts
    ON tweets.id = retweet_counts.tweet_id
LEFT JOIN 
    (SELECT tweet_id, COUNT(*) AS count FROM likes GROUP BY tweet_id) AS like_counts
    ON tweets.id = like_counts.tweet_id
LEFT JOIN 
    bookmarks ON tweets.id = bookmarks.tweet_id AND bookmarks.user_id = $3
ORDER BY 
    tweets.updated_at DESC
LIMIT $1 OFFSET $2
`

type GetAllTweetsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
	UserID int32 `json:"user_id"`
}

type GetAllTweetsRow struct {
	ID           int32          `json:"id"`
	UserID       int32          `json:"user_id"`
	Message      string         `json:"message"`
	CreatedAt    sql.NullTime   `json:"created_at"`
	UpdatedAt    sql.NullTime   `json:"updated_at"`
	ImageUrl     sql.NullString `json:"image_url"`
	Username     string         `json:"username"`
	RetweetCount int64          `json:"retweet_count"`
	LikeCount    int64          `json:"like_count"`
	IsBookmarked bool           `json:"is_bookmarked"`
}

func (q *Queries) GetAllTweets(ctx context.Context, arg GetAllTweetsParams) ([]GetAllTweetsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllTweets, arg.Limit, arg.Offset, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTweetsRow
	for rows.Next() {
		var i GetAllTweetsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Message,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ImageUrl,
			&i.Username,
			&i.RetweetCount,
			&i.LikeCount,
			&i.IsBookmarked,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
