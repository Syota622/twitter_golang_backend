// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: 000019_create_notification.sql

package generated

import (
	"context"
	"database/sql"
)

const createNotification = `-- name: CreateNotification :one
INSERT INTO notifications (user_id, notified_by_id, type, post_id, comment_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, notified_by_id, type, post_id, comment_id, created_at, updated_at
`

type CreateNotificationParams struct {
	UserID       int32         `json:"user_id"`
	NotifiedByID int32         `json:"notified_by_id"`
	Type         string        `json:"type"`
	PostID       sql.NullInt32 `json:"post_id"`
	CommentID    sql.NullInt32 `json:"comment_id"`
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRowContext(ctx, createNotification,
		arg.UserID,
		arg.NotifiedByID,
		arg.Type,
		arg.PostID,
		arg.CommentID,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.NotifiedByID,
		&i.Type,
		&i.PostID,
		&i.CommentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
